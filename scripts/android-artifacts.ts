const fs = require("fs");
const hre = require("hardhat");
const { exec } = require("child_process");

const destination = "./java/src/main/java/network/lukso/up/contracts";
const package = "network.lukso.up.contracts";

hre.run("prepare-package").then(async () => {
  // create temporary directory to write contract abi + binary files
  exec("mkdir tmp", () => {
    const contracts = hre.config.packager.contracts;

    for (const contract of contracts) {
      let artifact = fs.readFileSync(`./artifacts/${contract}.json`);

      // create temporary file to use as sources for web3j
      let abiFile = `./tmp/${contract}.abi`;
      let binFile = `./tmp/${contract}.bin`;

      // write the abis + binary generated by Hardhat into temporary files
      // we want to rely on solidity compiler version + optimiser settings
      // defined in Hardhat project configs, not on external solc setting
      let abi = JSON.parse(artifact).abi;
      let bin = JSON.parse(artifact).bytecode;

      fs.writeFile(abiFile, JSON.stringify(abi), { flag: "w" }, (err) => {
        if (err) console.error(err);
      });

      fs.writeFile(binFile, bin, { flag: "w" }, (err) => {
        if (err) console.error(err);
      });

      // generate smart contract wrappers in Java
      exec(
        `web3j generate solidity --abiFile=${abiFile} --binFile=${binFile} -o ${destination} -p ${package}`,
        (error, stdout, stderr) => {
          if (error) {
            console.log(`error: ${error.message}`);
            return;
          }
          if (stderr) {
            console.log(`stderr: ${stderr}`);
            return;
          }
          console.log(`stdout: ${stdout}`);
        }
      );
    }
  });
});
